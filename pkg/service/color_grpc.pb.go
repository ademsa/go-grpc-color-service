// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ColorServiceClient is the client API for ColorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ColorServiceClient interface {
	GetColor(ctx context.Context, in *GetColorRequest, opts ...grpc.CallOption) (*GetColorResponse, error)
}

type colorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewColorServiceClient(cc grpc.ClientConnInterface) ColorServiceClient {
	return &colorServiceClient{cc}
}

func (c *colorServiceClient) GetColor(ctx context.Context, in *GetColorRequest, opts ...grpc.CallOption) (*GetColorResponse, error) {
	out := new(GetColorResponse)
	err := c.cc.Invoke(ctx, "/service.ColorService/GetColor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ColorServiceServer is the server API for ColorService service.
// All implementations must embed UnimplementedColorServiceServer
// for forward compatibility
type ColorServiceServer interface {
	GetColor(context.Context, *GetColorRequest) (*GetColorResponse, error)
	mustEmbedUnimplementedColorServiceServer()
}

// UnimplementedColorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedColorServiceServer struct {
}

func (UnimplementedColorServiceServer) GetColor(context.Context, *GetColorRequest) (*GetColorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetColor not implemented")
}
func (UnimplementedColorServiceServer) mustEmbedUnimplementedColorServiceServer() {}

// UnsafeColorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ColorServiceServer will
// result in compilation errors.
type UnsafeColorServiceServer interface {
	mustEmbedUnimplementedColorServiceServer()
}

func RegisterColorServiceServer(s grpc.ServiceRegistrar, srv ColorServiceServer) {
	s.RegisterService(&_ColorService_serviceDesc, srv)
}

func _ColorService_GetColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColorServiceServer).GetColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ColorService/GetColor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColorServiceServer).GetColor(ctx, req.(*GetColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ColorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.ColorService",
	HandlerType: (*ColorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetColor",
			Handler:    _ColorService_GetColor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "color.proto",
}
